{"version":3,"sources":["App.styles.ts","data/items.ts","data/categories.ts","helpers/dateFilter.ts","components/TableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/InfoArea/styles.ts","components/ResumeItem/styles.ts","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/AddArea/styles.ts","components/AddArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","items","date","Date","category","title","value","categories","food","color","expense","rent","salary","formatDate","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeaderColumn","th","props","width","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","AddArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","now","getCurrentMonth","setCurrentMonth","filteredList","setFilteredList","setIncome","setExpense","useEffect","newList","i","filterListByMonth","incomeCount","expenseCount","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f669326c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n\r\n`;\r\n\r\nexport const Header = styled.div`\r\n    background-color: darkblue;\r\n    height: 150px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const HeaderText = styled.h1`\r\n    margin: 0;\r\n    padding: 0;\r\n    color: #fff;\r\n    padding-top: 30px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    margin: auto;\r\n    max-width: 980px;\r\n    margin-bottom: 50px;\r\n`;\r\n\r\n","import {Item} from '../types/Item'\r\n\r\nexport const items: Item[] = [\r\n    {\r\n        date: new Date(2021, 9, 15),\r\n        category: 'food',\r\n        title: 'McDonalds',\r\n        value: 32.12\r\n    },\r\n    {\r\n        date: new Date(2021, 9, 16),\r\n        category: 'food',\r\n        title: 'Burger King',\r\n        value: 28\r\n    },\r\n    {\r\n        date: new Date(2021, 9, 20),\r\n        category: 'rent',\r\n        title: 'Aluguel Apt',\r\n        value: 500\r\n    },\r\n    {\r\n        date: new Date(2021, 10, 15),\r\n        category: 'salary',\r\n        title: 'Salário',\r\n        value: 2500\r\n    },\r\n]","import {Category} from '../types/Category'\r\n\r\nexport const categories: Category = {\r\n    food: {title: 'Alimentação', color: 'blue', expense: true},\r\n    rent: {title: 'Aluguel', color: 'brown', expense: true},\r\n    salary: {title: 'Salário', color: 'green', expense: false},\r\n}","import { Item } from '../types/Item'\r\n\r\n\r\n// basicamente é uma lista de funções que irá\r\n// fazer filtragens baseadas em data\r\n\r\n// função para pegar o mes atual\r\nexport const getCurrentMonth = () => {\r\n    let now = new Date();\r\n    return `${now.getFullYear()}-${now.getMonth() + 1}`;\r\n}\r\n\r\n// filtrar pelo mes baseado em uma lista e retorna uma nova lista\r\n// o item após os parametros é o tipo do retorno\r\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\r\n    let newList: Item[] = [];\r\n    let [year, month] = date.split('-')\r\n\r\n    for(let i in list) {\r\n        if(\r\n            list[i].date.getFullYear() === parseInt(year) &&\r\n            (list[i].date.getMonth() + 1) === parseInt(month)\r\n        ){\r\n            newList.push(list[i]);\r\n        }\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\nexport const formatDate = (date: Date): string => {\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n\r\n    return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`\r\n}\r\n\r\nexport const addZeroToDate = (n: number): string => n < 10 ? `0${n}` : `${n}`\r\n\r\nexport const formatCurrentMonth = (currentMonth: string): string => {\r\n    let [year, month] = currentMonth.split('-')\r\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']\r\n\r\n    return `${months[parseInt(month) - 1]} de ${year}`\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Table = styled.table`\r\n    width: 100%;\r\n    background-color: #fff;\r\n    padding: 20px;\r\n    box-shadow: 0px 0px 5px #ccc;\r\n    margin-top: 20px;\r\n`;\r\n\r\n// o ? no type da prop marca que ela é opcional. Importante lembrar\r\n// que o styled components aceita props\r\nexport const TableHeaderColumn = styled.th<{width?: number;}>`\r\n    width: ${props => props.width ? `${props.width}px` : 'auto'};\r\n    padding: 10px 0;\r\n    text-align: left;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const TableLine = styled.tr``;\r\n\r\nexport const TableColumn = styled.td`\r\n    padding: 10px 0;\r\n`;\r\n\r\nexport const Category = styled.div<{color: string}>`\r\n    display: inline-block;\r\n    padding: 5px 10px;\r\n    border-radius: 5px; \r\n    color: #fff;\r\n    background-color: ${props => props.color};\r\n`;\r\n\r\nexport const Value = styled.div<{color: string}>`\r\n    color: ${props => props.color}\r\n`;","import * as C from './styles'\r\nimport {Item} from '../../types/Item'\r\nimport { formatDate } from '../../helpers/dateFilter'\r\nimport {categories} from '../../data/categories'\r\n\r\ntype Props = {\r\n    item: Item\r\n}\r\n\r\nexport const TableItem = ({item}: Props) => {\r\n    return (\r\n        <C.TableLine>\r\n            <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\r\n            <C.TableColumn>\r\n                <C.Category color={categories[item.category].color}>\r\n                    {categories[item.category].title}\r\n                </C.Category>\r\n            </C.TableColumn>\r\n            <C.TableColumn>{item.title}</C.TableColumn>\r\n            <C.TableColumn>\r\n                <C.Value color={categories[item.category].expense ? 'red' : 'green'}>\r\n                    R$ {item.value}\r\n                </C.Value>\r\n            </C.TableColumn>\r\n        </C.TableLine>\r\n    )\r\n}","import * as C from './styles'\r\nimport {Item} from '../../types/Item'\r\nimport {TableItem} from '../TableItem'\r\n\r\ntype Props = {\r\n    list: Item[]\r\n}\r\n\r\nexport const TableArea = ({list}: Props) => {\r\n    return (\r\n        <C.Table>\r\n            <thead>\r\n                <tr>\r\n                    <C.TableHeaderColumn width={100}>Data</C.TableHeaderColumn>\r\n                    <C.TableHeaderColumn width={130}>Categoria</C.TableHeaderColumn>\r\n                    <C.TableHeaderColumn>Título</C.TableHeaderColumn>\r\n                    <C.TableHeaderColumn width={150}>Valor</C.TableHeaderColumn>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {list.map((item, index) => (\r\n                    <TableItem key={index} item={item}/>\r\n                ))}\r\n            </tbody>\r\n        </C.Table>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #fff;\r\n    box-shadow: 0px 0px 5px #ccc;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin-top: -40px;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const MonthArea = styled.div`\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const MonthArrow = styled.div`\r\n    width: 40px;\r\n    text-align: center;\r\n    font-size: 25px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const MonthTitle = styled.div`\r\n    flex: 1;\r\n    text-align: center;\r\n`;\r\n\r\nexport const ResumeArea = styled.div`\r\n    flex: 2;\r\n    display: flex;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    flex 1;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    color: #888;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const Info = styled.div<{color?: string; }>`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    color: ${props => props.color ?? '#000'};\r\n`;","import * as C from './styles'\r\n\r\ntype Props = {\r\n    title: string;\r\n    value: number;\r\n    color?: string;\r\n}\r\n\r\nexport const ResumeItem = ({title, value, color}: Props) => {\r\n    return (\r\n        <C.Container>\r\n            <C.Title>{title}</C.Title>\r\n            <C.Info color={color}>R$ {value}</C.Info>\r\n        </C.Container>\r\n    )\r\n}","import * as C from './styles'\r\nimport { formatCurrentMonth } from '../../helpers/dateFilter'\r\nimport { ResumeItem } from '../../components/ResumeItem'\r\n\r\ntype Props = {\r\n    currentMonth: string;\r\n    onMonthChange: (newMonth: string) => void;\r\n    income: number;\r\n    expense: number;\r\n}\r\n\r\nexport const InfoArea = ({ currentMonth, onMonthChange, income, expense }: Props) => {\r\n\r\n    const handlePrevMonth = () => {\r\n        /* Importante lembrar aqui que não podemos somar ou diminuir apenas\r\n        pois no caso de janeiro vai ao mes 0 ou de dezembro vai ao mes 13.\r\n        Nesse caso temos que diminuir do próprio date que já faz esse \r\n        cálculo para a gente. */\r\n        let [year, month] = currentMonth.split('-');\r\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1) // nesse caso o 1 no final é o dia.\r\n        currentDate.setMonth(currentDate.getMonth() - 1)\r\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`)\r\n    }\r\n\r\n    const handleNextMonth = () => {\r\n        let [year, month] = currentMonth.split('-');\r\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1) // nesse caso o 1 no final é o dia.\r\n        currentDate.setMonth(currentDate.getMonth() + 1)\r\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`)\r\n    }\r\n\r\n    return (\r\n        <C.Container>\r\n            <C.MonthArea>\r\n                <C.MonthArrow onClick={handlePrevMonth}>⬅️</C.MonthArrow>\r\n                <C.MonthTitle>\r\n                    {formatCurrentMonth(currentMonth)}\r\n                </C.MonthTitle>\r\n                <C.MonthArrow onClick={handleNextMonth}>➡️</C.MonthArrow>\r\n            </C.MonthArea>\r\n            <C.ResumeArea>\r\n                <ResumeItem title=\"Receitas\" value={income}/>\r\n                <ResumeItem title=\"Despesas\" value={expense}/>\r\n                <ResumeItem \r\n                    title=\"Balanço\" \r\n                    value={income - expense}\r\n                    color={(income - expense) < 0 ? 'red' : 'green'}\r\n                />\r\n            </C.ResumeArea>\r\n        </C.Container>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #fff;\r\n    box-shadow: 0px 0px 5px #ccc;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    display: flex;\r\n    margin: 20px auto;\r\n    align-items: center;\r\n`;\r\n\r\nexport const InputLabel = styled.label`\r\n    flex: 1;\r\n    margin: 10px;\r\n`;\r\n\r\nexport const InputTitle = styled.div`\r\n    font-weight: bold;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport const Select = styled.select`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n`;\r\nexport const Button = styled.button`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n    background-color: lightblue;\r\n    color: black;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: blue;\r\n        color: white;\r\n    }\r\n`;","import { useState } from 'react'\r\nimport * as C from './styles'\r\nimport { Item } from '../../types/Item'\r\nimport { categories } from '../../data/categories'\r\n\r\ntype Props = {\r\n    onAdd: (item: Item) => void;\r\n}\r\n\r\nexport const AddArea = ({onAdd}: Props) => {\r\n    // recebe os valores de cada campo\r\n    const [dateField, setDateField] = useState('')\r\n    const [categoryField, setCategoryField] = useState('')\r\n    const [titleField,  setTitleField] = useState('')\r\n    const [valueField, setValueField] = useState(0)\r\n\r\n    // temos que pegar as categorias para poder listá-las\r\n    let categoryKeys: string[] = Object.keys(categories)\r\n\r\n    // valida os dados dos campos\r\n    const handleAddEvent = () => {\r\n        let errors: string[] = []\r\n\r\n        if(isNaN(new Date(dateField).getTime())) {\r\n            errors.push('Data inválida!')\r\n        }\r\n\r\n        if(!categoryKeys.includes(categoryField)) {\r\n            errors.push('Categoria inválida!')\r\n        }\r\n\r\n        if(titleField === '') {\r\n            errors.push('Título vazio!')\r\n        }\r\n\r\n        if(valueField < 0) {\r\n            errors.push('Valor inválido!')\r\n        }\r\n\r\n        if(errors.length > 0){\r\n            alert(errors.join(\"\\n\"))\r\n        } else {\r\n            onAdd({\r\n                date: new Date(dateField),\r\n                category: categoryField,\r\n                title: titleField,\r\n                value: valueField\r\n            });\r\n            clearFields()\r\n        }\r\n    }\r\n\r\n    const clearFields = () => {\r\n        setDateField('')\r\n        setTitleField('')\r\n        setCategoryField('')\r\n        setValueField(0)\r\n    }\r\n\r\n    return (\r\n        <C.Container>\r\n            {/* ... data categoria titulo valor botão */}\r\n            <C.InputLabel>\r\n                <C.InputTitle>Data</C.InputTitle>\r\n                <C.Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)}/>\r\n            </C.InputLabel>\r\n\r\n            <C.InputLabel>\r\n                <C.InputTitle>Categoria</C.InputTitle>\r\n                <C.Select value={categoryField} onChange={e => setCategoryField(e.target.value)}>\r\n                    <>\r\n                        <option></option>\r\n                        {categoryKeys.map((key, index) => (\r\n                            <option key={index} value={key}>{categories[key].title}</option>\r\n                        ))}\r\n                    </>\r\n                </C.Select>\r\n            </C.InputLabel>\r\n\r\n            <C.InputLabel>\r\n                <C.InputTitle>Título</C.InputTitle>\r\n                <C.Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)}/>\r\n            </C.InputLabel>\r\n\r\n            <C.InputLabel>\r\n                <C.InputTitle>Valor</C.InputTitle>\r\n                <C.Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))} />\r\n            </C.InputLabel>\r\n\r\n            <C.InputLabel>\r\n                <C.InputTitle>&nbsp;</C.InputTitle>\r\n                <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\r\n            </C.InputLabel>\r\n        </C.Container>\r\n    )\r\n}","import { useState, useEffect } from 'react'\nimport * as C from './App.styles'\nimport { Item } from './types/Item'\nimport { items } from './data/items'\nimport { categories } from './data/categories'\nimport { getCurrentMonth, filterListByMonth } from './helpers/dateFilter'\nimport {TableArea} from './components/TableArea'\nimport {InfoArea} from './components/InfoArea'\nimport { AddArea } from './components/AddArea'\n\nconst App = () => {\n  // não precisamos tipar ele pq o nosso item já está tipado\n  const [list, setList] = useState(items)\n  // o mais bacana é saber que o useState recebe uma função. Js é pirado msm kkk\n  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth())\n\n  // agora vamos criar uma lista filtrada com os items por mes\n  // nesse caso como o state inicia com o [] vazio, precisamos tipar\n  const [filteredList, setFilteredList] = useState<Item[]>([])\n\n  // aqui vamos calcular o valor total e o saldo e enviar para o InfoArea\n  const [income, setIncome] = useState(0)\n  const [expense, setExpense] = useState(0)\n\n  /* vamos explicar aqui a lógica: quando adicionarmos um item na lista\n  ele vai para a lista geral 'list' e temos que filtrar para só então\n  enviar para o 'filteredList'. Nesse caso precisamos monitorar o 'list' e também o 'currentMonth' com o useEffect. */\n\n  useEffect(() => {\n    setFilteredList(filterListByMonth(list, currentMonth))\n  },[list, currentMonth])\n\n  // aqui vamos monitorar a lista filtrada para somar o que é saldo ou despesa\n  useEffect(() => {\n    let incomeCount = 0\n    let expenseCount = 0\n\n    for(let i in filteredList) {\n      if(categories[filteredList[i].category].expense){\n        expenseCount += filteredList[i].value\n      } else {\n        incomeCount += filteredList[i].value\n      }\n    }\n\n    setIncome(incomeCount)\n    setExpense(expenseCount)\n  }, [filteredList])\n\n  // essa função vai receber o mes para ser alterado do componente InfoArea\n  const handleMonthChange = (newMonth: string) => {\n    setCurrentMonth(newMonth)\n  }\n\n  const handleAddItem = (item: Item) => {\n    let newList = [...list]\n    newList.push(item)\n    setList(newList)\n  }\n\n  return (\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Sistema Financeiro</C.HeaderText>\n      </C.Header>\n      <C.Body>\n\n        {/* área de informações */}\n        <InfoArea \n          currentMonth={currentMonth}\n          onMonthChange={handleMonthChange}\n          income={income}\n          expense={expense}\n        />\n\n        {/* área de inserção */}\n        <AddArea onAdd={handleAddItem}/>\n\n        {/* tabeça de itens */}\n        <TableArea list={filteredList}/> \n\n      </C.Body>\n    </C.Container>\n  )\n}\n\nexport default App ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}